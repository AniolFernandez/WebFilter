from collections import namedtuple
import json
from hashlib import sha512
import os.path
import re

CONFIG_PATH = "config.json"
DEFAULT_PASSWORD = "admin"

class PortProtocol():
    def __init__(self, port, tcp=True):
        self.port = port
        self.tcp = tcp

class Profile():
    def __init__(self, id="UNA", name="Usuaris no autenticats", accessKey="", unallowedDomains=[], unallowedKeywords=[], unallowedTime=[]):
        self.id = id
        self.name = name
        self.accessKey = accessKey
        self.unallowedDomains = unallowedDomains
        self.unallowedKeywords = unallowedKeywords
        self.unallowedTime = unallowedTime
        
class Config():
    def __init__(self, data=None, oldPassword=None):
        if data == None:
            self.adminPassword = self.__getDefaultPassword()
            self.enableHttps = False
            self.blockPorts = False
            self.allowedPorts = [ PortProtocol(80,True), PortProtocol(443,True), PortProtocol(53,False) ]
            self.profiles = [ Profile() ]
        elif type(data) is dict:
            self.__parseRequest(data, oldPassword)
        else:
            self.adminPassword = data.adminPassword
            self.enableHttps = data.enableHttps
            self.blockPorts = data.blockPorts
            self.allowedPorts = data.allowedPorts
            self.profiles = data.profiles
        self.confTemplate = self.__toSquidConfTemplate()

    #Privats ---------------------------------------------------------
    def __getDefaultPassword(self):
        return self.__hashPassword(DEFAULT_PASSWORD)

    def __hashPassword(self, password):
        return sha512(password.encode()).hexdigest()

    def __diaToSquidDay(self, temps):
        dia=""
        if(temps.startswith("Dilluns")):
            dia="M"
        elif(temps.startswith("Dimarts")):
            dia="T"
        elif(temps.startswith("Dimecres")):
            dia="W"
        elif(temps.startswith("Dijous")):
            dia="H"
        elif(temps.startswith("Divendres")):
            dia="F"
        elif(temps.startswith("Dissabte")):
            dia="A"
        elif(temps.startswith("Diumenge")):
            dia="S"
        else:
            raise Exception("Configuració de temps incorrecte.")
        return dia

    def __parseRequest(self, data, oldPassword):
        #Actualitza la contrasenya si cal
        if data['password'] != '':
            self.adminPassword=self.__hashPassword(data['password'])
        else:
            self.adminPassword=oldPassword
        
        #Config general
        self.enableHttps = data['https']
        self.blockPorts = data['bloqPorts']
        self.allowedPorts = list(map(lambda x: PortProtocol(x['port'],x['tcp']), data['openPorts']))

        #Perfils
        self.profiles = []
        for i, perfil in enumerate(data['profiles']):
            #Parse dominis i elimina elements sense res
            dominis = map(lambda domini: ('.' if domini['subdominis'] else '')+domini['domini'].lstrip('.').lower(), perfil['domains'])
            dominis = list(filter(lambda domini: domini!='', dominis))

            #Parse keywords i elimina sense res
            keywords = map(lambda keyword: keyword.strip().lower(), perfil['keywords'])
            keywords = list(filter(lambda keyword: keyword!='', keywords))

            if i==0: #UNA
                self.profiles.append(Profile(unallowedDomains=dominis, unallowedKeywords=keywords, unallowedTime=perfil['bloquedHours']))
            else:
                if perfil['id'] == 'UNA' or perfil['id'] == 'admin':
                    raise Exception(f"El nom de perfil no pot ser {perfil['id']}")
                self.profiles.append(Profile(perfil['id'], perfil['name'], perfil['pin'], dominis, keywords, perfil['bloquedHours']))
    
    def __toSquidConfTemplate(self):
        conf= "###################################################\n"
        conf+="###### GENERATED BY WebFilter: Aniol & Sergi ######\n"
        conf+="###################################################\n\n"
        conf+="acl admin src 127.0.0.1 {admin}\n"
        conf+="http_access allow admin\n\n"
        for profile in self.profiles[::-1]:
            profileKey= "" if profile.id=="UNA" else " ip"+profile.id
            conf+="#######################################\n"
            conf+=f"## Profile for {profile.name}\n\n"
            if profileKey!="":
                conf+="acl"+profileKey+" src 127.0.0.1 {"+profile.id+"}\n\n"

            #ACL Dominis
            if len(profile.unallowedDomains)>0:
                conf+=f"acl dominis_{profile.id} dstdomain "+" ".join(profile.unallowedDomains)+"\n"
                conf+=f"http_access deny dominis_{profile.id}{profileKey}\n\n"

            #ACL Keywords
            if len(profile.unallowedKeywords)>0:
                conf+=f"acl keywords_{profile.id} url_regex "+" ".join(profile.unallowedKeywords)+"\n"
                conf+=f"http_access deny keywords_{profile.id}{profileKey}\n\n"

            #ACL Horari
            if len(profile.unallowedTime)> 0:
                ultimaHora = -100
                ultimDia = ""
                horesSeguides=0
                ferConfigHoraria = lambda perfil, key, dia, hora, seguides: f"acl {perfil}_{dia}_{hora}_{hora+seguides} time {dia} {hora:02d}:00-{(hora+seguides):02d}:59\nhttp_access deny {perfil}_{dia}_{hora}_{hora+seguides}{key}\n\n"
                for horaBloq in profile.unallowedTime:
                    #Obtenim dia i hora
                    hora = int(re.search(r'\d+$', horaBloq).group())
                    dia = self.__diaToSquidDay(horaBloq)
                    
                    #Si encara no tenim hora, és la primera
                    if ultimaHora == -100:
                            ultimaHora=hora
                            ultimDia=dia
                    
                    #Si l'hora actual es consecutiva a la original estem dins el mateix interval
                    if dia==ultimDia and hora-horesSeguides == ultimaHora:
                        horesSeguides+=1
                    
                    #Sino guardem config
                    else:
                        conf+=ferConfigHoraria(profile.id, profileKey, ultimDia, ultimaHora, horesSeguides-1)
                        ultimaHora=hora
                        horesSeguides=1
                    ultimDia=dia
                #Ultima configuració a guardar d'hores
                conf+=ferConfigHoraria(profile.id, profileKey, ultimDia, ultimaHora, horesSeguides-1)            

            #Acceptar acces de perfil
            if profileKey!="":
                conf+=f"http_access allow{profileKey}\n\n"
        
        #Acceptar la resta
        conf+="http_access allow all\n"
        return conf

    #Publics ---------------------------------------------------------
    def toJSON(self):
        return json.dumps(self, default=lambda o: o.__dict__, indent=4)

    def hasDefaultPassword(self):
        return self.__getDefaultPassword() == self.adminPassword

    def adminPasswordMatch(self, password):
        return self.adminPassword == self.__hashPassword(password)
    
    def profilePasswordMatch(self, profileId, password):
        if(profileId=="admin"):
            return self.adminPasswordMatch(password)
        else:
            lst = list(filter(lambda x: x.id==profileId, self.profiles))
            return len(lst)>0 and lst[0].accessKey == password

    def configSquid(self, ips):
        ipsTots = {}

        #Assegurem com a minim una entrada per perfil
        for profile in self.profiles:
            if profile.id!="UNA":
                ipsTots[profile.id] = ""
        ipsTots['admin'] = ""

        #Assignem les ips conegudes
        for id, ips in ips.items():
            ipsTots[id] = " ".join(ips)

        return self.confTemplate.format(**ipsTots)
         
            
    # FI -------------------------------------------------------------

def decoder(dict):
    return namedtuple('X', dict.keys())(*dict.values())
    
def storeConfig(config):
    with open(CONFIG_PATH,"w") as f:
        f.write(config.toJSON())

def loadConfig():
    if os.path.exists(CONFIG_PATH):
        with open(CONFIG_PATH,"r") as f:
            return Config(json.loads(f.read().replace('\n', ''), object_hook=decoder))
    else:
        conf = Config()
        storeConfig(conf)
        return conf

